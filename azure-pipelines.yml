# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - master
pr:
  - master

variables:
  buildConfiguration: 'Release'

stages:
  - stage: "Prepare"  
    displayName: "Build and test"
    jobs:
      - job: "Build"
        strategy:
          matrix:
            Linux:
              imageName: 'ubuntu-latest'
            Windows:
              imageName: 'windows-latest'
        steps:
          - script: dotnet build --configuration $(buildConfiguration)
            displayName: 'dotnet build $(buildConfiguration)'
          - script: dotnet test -v n --configuration $(buildConfiguration) -l trx
            displayName: 'dotnet test $(buildConfiguration)'
          - script: dotnet pack --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
            condition: and(succeeded(), eq(variables.imageName, 'ubuntu-latest'))
            displayName: 'dotnet pack $(buildConfiguration)'   
          - task: PublishBuildArtifacts@1
            condition: and(succeeded(), eq(variables.imageName, 'ubuntu-latest'))
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: pack


  - stage: "Release"
    dependsOn: "Prepare"
    condition:  and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/release'))
    jobs:
    - job: "GitHubRelease"
      displayName: "GitHub Release"
      steps:
        - task: GitHubRelease@1
          displayName: 'GitHub release (create)'  
          inputs:  
            gitHubConnection: ctolkien
            tagSource: userSpecifiedTag
            tag: '$(Build.BuildNumber)'
            title: '$(Build.BuildNumber)'  
            assets: '**/*.nupkg'  
            changeLogCompareToRelease: lastNonDraftRelease
    - deployment: "NugetPublish"
      displayName: "Publish to Nuget"
      environment: "NuGet"
      pool:
        vmImage: 'windows-2019'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: NuGetCommand@2
              displayName: "Push to NuGet"
              inputs:
                command: 'push'
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;'
                nuGetFeedType: 'external'
                publishFeedCredentials: 'NuGet'   